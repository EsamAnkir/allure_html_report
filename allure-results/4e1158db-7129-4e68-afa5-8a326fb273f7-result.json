{"name": "test_selecting_product", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"p[data-testid=\"no-items-message\"]\"}\n  (Session info: headless chrome=117.0.5938.132); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\n#0 0x5624e2529e23 <unknown>\n#1 0x5624e22527a7 <unknown>\n#2 0x5624e22911d3 <unknown>\n#3 0x5624e22912c1 <unknown>\n#4 0x5624e22cca04 <unknown>\n#5 0x5624e22b203d <unknown>\n#6 0x5624e22ca369 <unknown>\n#7 0x5624e22b1de3 <unknown>\n#8 0x5624e2285a7b <unknown>\n#9 0x5624e228681e <unknown>\n#10 0x5624e24eb638 <unknown>\n#11 0x5624e24ef507 <unknown>\n#12 0x5624e24f9c4c <unknown>\n#13 0x5624e24f0136 <unknown>\n#14 0x5624e24be9cf <unknown>\n#15 0x5624e2513b98 <unknown>\n#16 0x5624e2513d68 <unknown>\n#17 0x5624e2522cb3 <unknown>\n#18 0x7f136ff98fa3 start_thread", "trace": "chrome_browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"69ee913c87e00112a177cd3de25abf95\")>\nlocator_name = 'product_result_title', page_title = 'product_title_edit_page'\nno_items_message = 'no_items_message'\n\n    @when(parsers.parse('The user clicks the product \"{locator_name}\" and check the \"{page_title}\" or \"{no_items_message}\"'))\n    def check_product_tittle(chrome_browser: Chrome, locator_name: str, page_title: str, no_items_message: str) -> None:\n        try:\n            WebDriverWait(chrome_browser, 20).until(EC.element_to_be_clickable(resin_locators[locator_name]) and EC.visibility_of_element_located(resin_locators[locator_name]))\n            element = get_element(chrome_browser, *resin_locators[locator_name])\n            product_title_listing_page = element.text\n            click_element(chrome_browser, element)\n>           WebDriverWait(chrome_browser, 20).until(EC.visibility_of_element_located(resin_locators[page_title]))\n\ntests/integration/resin/products/test_product_service_page.py:79: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"69ee913c87e00112a177cd3de25abf95\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x7f636730aac0>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x5624e2529e23 <unknown>\nE       #1 0x5624e22527a7 <unknown>\nE       #2 0x5624e22911d3 <unknown>\nE       #3 0x5624e22912c1 <unknown>\nE       #4 0x5624e22cca04 <unknown>\nE       #5 0x5624e22b203d <unknown>\nE       #6 0x5624e22ca369 <unknown>\nE       #7 0x5624e22b1de3 <unknown>\nE       #8 0x5624e2285a7b <unknown>\nE       #9 0x5624e228681e <unknown>\nE       #10 0x5624e24eb638 <unknown>\nE       #11 0x5624e24ef507 <unknown>\nE       #12 0x5624e24f9c4c <unknown>\nE       #13 0x5624e24f0136 <unknown>\nE       #14 0x5624e24be9cf <unknown>\nE       #15 0x5624e2513b98 <unknown>\nE       #16 0x5624e2513d68 <unknown>\nE       #17 0x5624e2522cb3 <unknown>\nE       #18 0x7f136ff98fa3 start_thread\n\n/opt/local/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:95: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nrequest = <FixtureRequest for <Function test_selecting_product>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request)\n\n/opt/local/lib/python3.11/site-packages/pytest_bdd/scenario.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/local/lib/python3.11/site-packages/pytest_bdd/scenario.py:136: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n/opt/local/lib/python3.11/site-packages/pytest_bdd/scenario.py:106: in _execute_step_function\n    return_value = step_func(**kwargs)\ntests/integration/resin/products/test_product_service_page.py:83: in check_product_tittle\n    element = get_element(chrome_browser, *resin_locators[no_items_message])\ntests/utilities.py:44: in get_element\n    element = browser.find_element(type, selector)\n/opt/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:738: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/opt/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f6367099d90>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...wn>\\\\n#16 0x5624e2513d68 \\\\u003Cunknown>\\\\n#17 0x5624e2522cb3 \\\\u003Cunknown>\\\\n#18 0x7f136ff98fa3 start_thread\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"p[data-testid=\"no-items-message\"]\"}\nE         (Session info: headless chrome=117.0.5938.132); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       #0 0x5624e2529e23 <unknown>\nE       #1 0x5624e22527a7 <unknown>\nE       #2 0x5624e22911d3 <unknown>\nE       #3 0x5624e22912c1 <unknown>\nE       #4 0x5624e22cca04 <unknown>\nE       #5 0x5624e22b203d <unknown>\nE       #6 0x5624e22ca369 <unknown>\nE       #7 0x5624e22b1de3 <unknown>\nE       #8 0x5624e2285a7b <unknown>\nE       #9 0x5624e228681e <unknown>\nE       #10 0x5624e24eb638 <unknown>\nE       #11 0x5624e24ef507 <unknown>\nE       #12 0x5624e24f9c4c <unknown>\nE       #13 0x5624e24f0136 <unknown>\nE       #14 0x5624e24be9cf <unknown>\nE       #15 0x5624e2513b98 <unknown>\nE       #16 0x5624e2513d68 <unknown>\nE       #17 0x5624e2522cb3 <unknown>\nE       #18 0x7f136ff98fa3 start_thread\n\n/opt/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchElementException"}, "description": "frontend/resin/resin_product_service_page.feature: Verify that the user can navigate to product info by clicking on the product title", "attachments": [{"name": "screenshot", "source": "e98b6e72-ed2a-4a16-b84f-543059932927-attachment.png", "type": "image/png"}, {"name": "log", "source": "7cedf540-699e-4c44-bd9b-73047c428e07-attachment.txt", "type": "text/plain"}], "start": 1696510900274, "stop": 1696510945130, "uuid": "8fd0a5a5-4e21-408a-b07d-aefdbc599128", "historyId": "13fd10cbfe85e38552ca3d2017033685", "testCaseId": "13fd10cbfe85e38552ca3d2017033685", "fullName": "tests.integration.resin.products.test_product_service_page#test_selecting_product", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures"}, {"name": "parentSuite", "value": "tests.integration.resin.products"}, {"name": "suite", "value": "test_product_service_page"}, {"name": "host", "value": "4eba59ba15c6"}, {"name": "thread", "value": "8-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.integration.resin.products.test_product_service_page"}]}